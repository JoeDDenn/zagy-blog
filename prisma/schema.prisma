// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String @db.VarChar(255)
  userName String @unique @db.VarChar(20)
  email String @unique @db.VarChar(255)
  password String
  brief String @db.VarChar(255)
  description String
  image String
  role Role @default(USER)
  createdAt DateTime @default(now())
  posts Post[]
  tags Tag[]
}
model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String @db.VarChar(255)
  image String
  breif String @db.VarChar(255)
  content String
  author User @relation(fields: [authorId], references: [id])
  authorId String
  tags TagsOnPosts[]
}
model Tag {
  id String @id @default(uuid())
  name String @unique @db.VarChar(50)
  createdAt DateTime @default(now())
  author User @relation(fields: [authorId], references: [id])
  authorId String
  posts TagsOnPosts[]
}
model TagsOnPosts {
  assignedAt DateTime @default(now())
  post Post @relation(fields: [postId], references: [id])
  postId String
  tag Tag @relation(fields: [tagId], references: [id])
  tagId String
  @@id([postId, tagId])
}
enum Role {
  USER
  ADMIN
}
